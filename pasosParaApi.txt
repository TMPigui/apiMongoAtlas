1. Crear y configurar cuenta en MongoDB Atlas
	Crear cluster
	Database Access : Configurar Buil on Role
	Network Acsess: Permitir acceso de cualquier parte
	Database: connect

2. Crear el proyecto de Express con las siguientes instalaciones
	npm init -y
	npm i dotenv
	npm i mongoose
	npm i express
	npm i nodemon -D

2.1. Generar el archivo .env en la raíz del proyecto, con la siguientes instrucciones:
	
	PORT = 9000
	MONGODB_URI = mongodb+srv://dllosoft:dllosoft@atlascluster.tjj4xh8.mongodb.net/dbprueba?retryWrites=true&w=majority
	
3. Generar el archivo src/index.js, con las siguientes instrucciones:

	const express = require('express');
var cors = require('cors')
const mongoose = require('mongoose');
require('dotenv').config(); // Manejo de variables de entorno en el archivo .env
// Importar el archivo de las rutas
const userRoutes = require('./routes/user')

const app = express();
const port = process.env.PORT || 3200

// Middleware para json
app.use(express.json())
// Middleware para rutas
app.use('/api', userRoutes);
// cors
app.use(cors())

app.get('/',(req, res)=>{
    res.send("Hola, desde API REST")
})

mongoose.connect(process.env.MONGODB_URI)
    .then(()=>console.log("Conectado a la base de datos de MongoDB Atlas"))
    .catch(()=> console.error("Error de conexión a la base de datos") )

app.listen(port, ()=>{
    console.log(`Servidor iniciado en http://localhost:${port}`);
})


4. Crear el archivo para los modelos src/models/user.js:

	const mongoose = require('mongoose');

const userSchema = mongoose.Schema({
    name:{
        type: String,
        required: true
    },
    age:{
        type:Number,
        required:true
    },
    email:{
        type:String,
        required:true
    }
});

module.exports = mongoose.model('User', userSchema);	

5. Generar los end-points en src/routes/user.js
	
const express = require('express');
var cors = require('cors')
// importar el esquema de models
const userSchema = require('../models/user');

const router = express.Router();
// Middleware
router.use(cors());
// Rutas
// Agregar user
router.post('/users',cors(),(req, res)=>{
    const user = userSchema(req.body);
    user
        .save()
        .then((data) => res.json(data))
        .catch((error) =>res.json({message: error}))
})
// Recuperar todos los users
router.get('/users',cors(),(req, res)=>{
   userSchema
        .find()
        .then((data) => res.json(data))
        .catch((error) =>res.json({message: error}))
})

// Recuperar user por id
router.get('/users/:id',cors(),(req, res)=>{
    const { id } = req.params;
    userSchema
         .findById(id)
         .then((data) => res.json(data))
         .catch((error) =>res.json({message: error}))
 })
// Nuevo: Buscar por email
 router.get('/users/:email',cors(),(req, res)=>{
    const { email } = req.params;
    userSchema
            .findOne({email: email }, function (err, docs) {
                if (err){
                    console.log(err)
                }
                else{
                    console.log("Result : ", docs);
                }
    });
        //  .findOne(email)
        //  .then((data) => res.json(data))
        //  .catch((error) =>res.json({message: error}))
 })

 // Actualizar user por id
router.put('/users/:id',cors(),(req, res)=>{
    const { id } = req.params;
    const {name, age, email} = req.body;
    userSchema
         .updateOne({_id:id},{$set: {name, age, email}})
         .then((data) => res.json(data))
         .catch((error) =>res.json({message: error}))
 })

  // Eliminar user por id
router.delete('/users/:id',cors(),(req, res)=>{
    const { id } = req.params;
    userSchema
         .deleteOne({_id:id})
         .then((data) => res.json(data))
         .catch((error) =>res.json({message: error}))
 })


module.exports = router;

6. Subir el servidor nodemon src/index


mongodb+srv://dllosoftware:<password>@atlascluster.pdnfasc.mongodb.net/?retryWrites=true&w=majority

mongodb+srv://dllosoftware:<password>@atlascluster.pdnfasc.mongodb.net/